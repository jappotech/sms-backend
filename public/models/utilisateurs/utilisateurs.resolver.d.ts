import { UtilisateursService } from './utilisateurs.service';
import { Utilisateur } from './entity/utilisateur.entity';
import { FindManyUtilisateurArgs, FindUniqueUtilisateurArgs } from './dtos/find.args';
import { CreateUtilisateurInput } from './dtos/create-utilisateur.input';
import { UpdateUtilisateurInput } from './dtos/update-utilisateur.input';
import { GetUserType } from 'src/common/types';
import { PrismaService } from 'src/common/prisma/prisma.service';
import { Prisma } from '@prisma/client';
export declare class UtilisateursResolver {
    private readonly utilisateursService;
    private readonly prisma;
    constructor(utilisateursService: UtilisateursService, prisma: PrismaService);
    createUtilisateur(args: CreateUtilisateurInput, user: GetUserType): Promise<{
        id: number;
        matricule: string;
        createdAt: Date;
        updatedAt: Date;
        prenom: string;
        nom: string;
        dateNaissance: Date;
        lieuNaissance: string;
        cni: string;
        genre: import(".prisma/client").$Enums.Genre;
        nationalite: string;
        groupeSanguin: import(".prisma/client").$Enums.GroupeSanguin;
        etablissementId: number;
        statutCompte: import(".prisma/client").$Enums.StatutCompte;
        roles: import(".prisma/client").$Enums.Role[];
        contactId: number;
        adresseId: number;
        accountId: number;
    }>;
    findAll(args: FindManyUtilisateurArgs, user: GetUserType): Promise<{
        id: number;
        matricule: string;
        createdAt: Date;
        updatedAt: Date;
        prenom: string;
        nom: string;
        dateNaissance: Date;
        lieuNaissance: string;
        cni: string;
        genre: import(".prisma/client").$Enums.Genre;
        nationalite: string;
        groupeSanguin: import(".prisma/client").$Enums.GroupeSanguin;
        etablissementId: number;
        statutCompte: import(".prisma/client").$Enums.StatutCompte;
        roles: import(".prisma/client").$Enums.Role[];
        contactId: number;
        adresseId: number;
        accountId: number;
    }[]>;
    findOne(args: FindUniqueUtilisateurArgs): Prisma.Prisma__UtilisateurClient<{
        id: number;
        matricule: string;
        createdAt: Date;
        updatedAt: Date;
        prenom: string;
        nom: string;
        dateNaissance: Date;
        lieuNaissance: string;
        cni: string;
        genre: import(".prisma/client").$Enums.Genre;
        nationalite: string;
        groupeSanguin: import(".prisma/client").$Enums.GroupeSanguin;
        etablissementId: number;
        statutCompte: import(".prisma/client").$Enums.StatutCompte;
        roles: import(".prisma/client").$Enums.Role[];
        contactId: number;
        adresseId: number;
        accountId: number;
    }, null, import("@prisma/client/runtime/library").DefaultArgs>;
    findMe(user: GetUserType): Promise<{
        id: number;
        matricule: string;
        createdAt: Date;
        updatedAt: Date;
        prenom: string;
        nom: string;
        dateNaissance: Date;
        lieuNaissance: string;
        cni: string;
        genre: import(".prisma/client").$Enums.Genre;
        nationalite: string;
        groupeSanguin: import(".prisma/client").$Enums.GroupeSanguin;
        etablissementId: number;
        statutCompte: import(".prisma/client").$Enums.StatutCompte;
        roles: import(".prisma/client").$Enums.Role[];
        contactId: number;
        adresseId: number;
        accountId: number;
    }>;
    updateUtilisateur(args: UpdateUtilisateurInput, user: GetUserType): Promise<{
        id: number;
        matricule: string;
        createdAt: Date;
        updatedAt: Date;
        prenom: string;
        nom: string;
        dateNaissance: Date;
        lieuNaissance: string;
        cni: string;
        genre: import(".prisma/client").$Enums.Genre;
        nationalite: string;
        groupeSanguin: import(".prisma/client").$Enums.GroupeSanguin;
        etablissementId: number;
        statutCompte: import(".prisma/client").$Enums.StatutCompte;
        roles: import(".prisma/client").$Enums.Role[];
        contactId: number;
        adresseId: number;
        accountId: number;
    }>;
    removeUtilisateur(args: FindUniqueUtilisateurArgs, user: GetUserType): Promise<{
        id: number;
        matricule: string;
        createdAt: Date;
        updatedAt: Date;
        prenom: string;
        nom: string;
        dateNaissance: Date;
        lieuNaissance: string;
        cni: string;
        genre: import(".prisma/client").$Enums.Genre;
        nationalite: string;
        groupeSanguin: import(".prisma/client").$Enums.GroupeSanguin;
        etablissementId: number;
        statutCompte: import(".prisma/client").$Enums.StatutCompte;
        roles: import(".prisma/client").$Enums.Role[];
        contactId: number;
        adresseId: number;
        accountId: number;
    }>;
    etablissement(parent: Utilisateur): Promise<{}>;
    adresse(parent: Utilisateur): Promise<{}>;
    contact(parent: Utilisateur): Promise<{}>;
}
