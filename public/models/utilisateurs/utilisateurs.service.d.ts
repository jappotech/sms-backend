import { FindManyUtilisateurArgs, FindUniqueUtilisateurArgs } from './dtos/find.args';
import { PrismaService } from 'src/common/prisma/prisma.service';
import { CreateUtilisateurInput } from './dtos/create-utilisateur.input';
import { UpdateUtilisateurInput } from './dtos/update-utilisateur.input';
import { Prisma } from '@prisma/client';
import { AccountsService } from '../accounts/accounts.service';
export declare class UtilisateursService {
    private readonly prisma;
    private accountService;
    constructor(prisma: PrismaService, accountService: AccountsService);
    create(createUtilisateurInput: CreateUtilisateurInput): Promise<{
        id: number;
        matricule: string;
        createdAt: Date;
        updatedAt: Date;
        prenom: string;
        nom: string;
        dateNaissance: Date;
        lieuNaissance: string;
        cni: string;
        genre: import(".prisma/client").$Enums.Genre;
        nationalite: string;
        groupeSanguin: import(".prisma/client").$Enums.GroupeSanguin;
        etablissementId: number;
        statutCompte: import(".prisma/client").$Enums.StatutCompte;
        roles: import(".prisma/client").$Enums.Role[];
        contactId: number;
        adresseId: number;
        accountId: number;
    }>;
    findAll(args: FindManyUtilisateurArgs): Prisma.PrismaPromise<{
        id: number;
        matricule: string;
        createdAt: Date;
        updatedAt: Date;
        prenom: string;
        nom: string;
        dateNaissance: Date;
        lieuNaissance: string;
        cni: string;
        genre: import(".prisma/client").$Enums.Genre;
        nationalite: string;
        groupeSanguin: import(".prisma/client").$Enums.GroupeSanguin;
        etablissementId: number;
        statutCompte: import(".prisma/client").$Enums.StatutCompte;
        roles: import(".prisma/client").$Enums.Role[];
        contactId: number;
        adresseId: number;
        accountId: number;
    }[]>;
    findAllByEtablissement(args: FindManyUtilisateurArgs, id: number): Prisma.PrismaPromise<{
        id: number;
        matricule: string;
        createdAt: Date;
        updatedAt: Date;
        prenom: string;
        nom: string;
        dateNaissance: Date;
        lieuNaissance: string;
        cni: string;
        genre: import(".prisma/client").$Enums.Genre;
        nationalite: string;
        groupeSanguin: import(".prisma/client").$Enums.GroupeSanguin;
        etablissementId: number;
        statutCompte: import(".prisma/client").$Enums.StatutCompte;
        roles: import(".prisma/client").$Enums.Role[];
        contactId: number;
        adresseId: number;
        accountId: number;
    }[]>;
    findOne(args: FindUniqueUtilisateurArgs): Prisma.Prisma__UtilisateurClient<{
        id: number;
        matricule: string;
        createdAt: Date;
        updatedAt: Date;
        prenom: string;
        nom: string;
        dateNaissance: Date;
        lieuNaissance: string;
        cni: string;
        genre: import(".prisma/client").$Enums.Genre;
        nationalite: string;
        groupeSanguin: import(".prisma/client").$Enums.GroupeSanguin;
        etablissementId: number;
        statutCompte: import(".prisma/client").$Enums.StatutCompte;
        roles: import(".prisma/client").$Enums.Role[];
        contactId: number;
        adresseId: number;
        accountId: number;
    }, null, import("@prisma/client/runtime/library").DefaultArgs>;
    findMe(uid: string): Promise<{
        id: number;
        matricule: string;
        createdAt: Date;
        updatedAt: Date;
        prenom: string;
        nom: string;
        dateNaissance: Date;
        lieuNaissance: string;
        cni: string;
        genre: import(".prisma/client").$Enums.Genre;
        nationalite: string;
        groupeSanguin: import(".prisma/client").$Enums.GroupeSanguin;
        etablissementId: number;
        statutCompte: import(".prisma/client").$Enums.StatutCompte;
        roles: import(".prisma/client").$Enums.Role[];
        contactId: number;
        adresseId: number;
        accountId: number;
    }>;
    update(updateUtilisateurInput: UpdateUtilisateurInput): Prisma.Prisma__UtilisateurClient<{
        id: number;
        matricule: string;
        createdAt: Date;
        updatedAt: Date;
        prenom: string;
        nom: string;
        dateNaissance: Date;
        lieuNaissance: string;
        cni: string;
        genre: import(".prisma/client").$Enums.Genre;
        nationalite: string;
        groupeSanguin: import(".prisma/client").$Enums.GroupeSanguin;
        etablissementId: number;
        statutCompte: import(".prisma/client").$Enums.StatutCompte;
        roles: import(".prisma/client").$Enums.Role[];
        contactId: number;
        adresseId: number;
        accountId: number;
    }, never, import("@prisma/client/runtime/library").DefaultArgs>;
    remove(args: FindUniqueUtilisateurArgs): Prisma.Prisma__UtilisateurClient<{
        id: number;
        matricule: string;
        createdAt: Date;
        updatedAt: Date;
        prenom: string;
        nom: string;
        dateNaissance: Date;
        lieuNaissance: string;
        cni: string;
        genre: import(".prisma/client").$Enums.Genre;
        nationalite: string;
        groupeSanguin: import(".prisma/client").$Enums.GroupeSanguin;
        etablissementId: number;
        statutCompte: import(".prisma/client").$Enums.StatutCompte;
        roles: import(".prisma/client").$Enums.Role[];
        contactId: number;
        adresseId: number;
        accountId: number;
    }, never, import("@prisma/client/runtime/library").DefaultArgs>;
}
