import { CoursService } from './cours.service';
import { Cours } from './entity/cours.entity';
import { FindManyCoursArgs, FindUniqueCoursArgs } from './dtos/find.args';
import { CreateCoursInput } from './dtos/create-cours.input';
import { UpdateCoursInput } from './dtos/update-cours.input';
import { GetUserType } from 'src/common/types';
import { PrismaService } from 'src/common/prisma/prisma.service';
import { Prisma } from '@prisma/client';
export declare class CoursResolver {
    private readonly coursService;
    private readonly prisma;
    constructor(coursService: CoursService, prisma: PrismaService);
    createCours(args: CreateCoursInput, user: GetUserType): Promise<{
        id: number;
        createdAt: Date;
        updatedAt: Date;
        nom: string;
        description: string;
        dateDebut: Date;
        dateFin: Date;
        heureDebut: Date;
        heureFin: Date;
        matiereId: number;
        salleId: number;
        classeId: number;
        professeurId: number;
    }>;
    findAll(args: FindManyCoursArgs, user: GetUserType): Promise<{
        id: number;
        createdAt: Date;
        updatedAt: Date;
        nom: string;
        description: string;
        dateDebut: Date;
        dateFin: Date;
        heureDebut: Date;
        heureFin: Date;
        matiereId: number;
        salleId: number;
        classeId: number;
        professeurId: number;
    }[]>;
    findOne(args: FindUniqueCoursArgs): Prisma.Prisma__CoursClient<{
        id: number;
        createdAt: Date;
        updatedAt: Date;
        nom: string;
        description: string;
        dateDebut: Date;
        dateFin: Date;
        heureDebut: Date;
        heureFin: Date;
        matiereId: number;
        salleId: number;
        classeId: number;
        professeurId: number;
    }, null, import("@prisma/client/runtime/library").DefaultArgs>;
    updateCours(args: UpdateCoursInput, user: GetUserType): Promise<{
        id: number;
        createdAt: Date;
        updatedAt: Date;
        nom: string;
        description: string;
        dateDebut: Date;
        dateFin: Date;
        heureDebut: Date;
        heureFin: Date;
        matiereId: number;
        salleId: number;
        classeId: number;
        professeurId: number;
    }>;
    removeCours(args: FindUniqueCoursArgs, user: GetUserType): Promise<{
        id: number;
        createdAt: Date;
        updatedAt: Date;
        nom: string;
        description: string;
        dateDebut: Date;
        dateFin: Date;
        heureDebut: Date;
        heureFin: Date;
        matiereId: number;
        salleId: number;
        classeId: number;
        professeurId: number;
    }>;
    matiere(parent: Cours): Promise<{}>;
    classe(parent: Cours): Promise<{}>;
    salle(parent: Cours): Promise<{}>;
    professeur(parent: Cours): Promise<{}>;
}
