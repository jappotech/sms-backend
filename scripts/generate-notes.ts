#!/usr/bin/env ts-node

import { PrismaClient, TypeEvaluation } from '@prisma/client';

const prisma = new PrismaClient();

// Fonction pour g√©n√©rer une note al√©atoire entre min et max
function generateRandomNote(min: number = 10, max: number = 17): number {
  return Math.round((Math.random() * (max - min) + min) * 100) / 100; // 2 d√©cimales
}

// Fonction pour g√©n√©rer une date d'√©valuation al√©atoire dans l'ann√©e scolaire
function generateRandomDate(): Date {
  const start = new Date('2024-09-01'); // D√©but ann√©e scolaire
  const end = new Date('2025-06-30');   // Fin ann√©e scolaire
  const randomTime = start.getTime() + Math.random() * (end.getTime() - start.getTime());
  return new Date(randomTime);
}

async function generateNotesForAllStudents() {
  console.log('üöÄ D√©marrage de la g√©n√©ration des notes...');

  // supprimer les notes existantes
  const deleteMany = await prisma.noteEtudiant.deleteMany({});

  if(deleteMany.count > 0) {
    console.log('üöÄ Suppression des notes ‚òëÔ∏è ...');
  }

  try {
    // 1. R√©cup√©rer tous les √©tudiants
    const etudiants = await prisma.etudiant.findMany({
      include: {
        profile: true, // Inclure le profil pour acc√©der aux noms
        inscriptions: {
          include: {
            classe: {
              include: {
                uniteEnseignements: {
                  include: {
                    matieres: {
                      include: {
                        cours: true
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    });

    console.log(`üìö Trouv√© ${etudiants.length} √©tudiants`);

    let totalEvaluationsCreated = 0;
    let totalNotesCreated = 0;

    // 2. Pour chaque √©tudiant
    for (const etudiant of etudiants) {
      console.log(`\nüë®‚Äçüéì Traitement de l'√©tudiant: ${etudiant.profile?.prenom} ${etudiant.profile?.nom}`);

      // Parcourir ses inscriptions
      for (const inscription of etudiant.inscriptions) {
        const classe = inscription.classe;
        console.log(`   üìñ Classe: ${classe.nom}`);

        // Parcourir les UE de la classe
        for (const ue of classe.uniteEnseignements) {
          console.log(`     üìä UE: ${ue.code} - ${ue.nom}`);

          // Parcourir les mati√®res de l'UE
          for (const matiere of ue.matieres) {
            console.log(`       üìù Mati√®re: ${matiere.code} - ${matiere.nom}`);

            // Parcourir les cours de la mati√®re
            for (const cours of matiere.cours) {
              console.log(`         üéØ Cours: ${cours.nom}`);

              // Cr√©er des √©valuations CC et EXAMEN pour ce cours
              const evaluationTypes: TypeEvaluation[] = ['CONTROLE_CONTINU', 'EXAMEN'];

              for (const typeEval of evaluationTypes) {
                // V√©rifier si l'√©valuation existe d√©j√† pour ce cours et ce type
                const existingEvaluation = await prisma.evaluationEtudiants.findFirst({
                  where: {
                    coursId: cours.id,
                    typeEvaluation: typeEval,
                  }
                });

                let evaluation;
                if (existingEvaluation) {
                  evaluation = existingEvaluation;
                  console.log(`           ‚ôªÔ∏è  √âvaluation ${typeEval} existante trouv√©e`);
                } else {
                  // Cr√©er une nouvelle √©valuation
                  evaluation = await prisma.evaluationEtudiants.create({
                    data: {
                      typeEvaluation: typeEval,
                      dateEvaluation: generateRandomDate(),
                      duree: typeEval === 'CONTROLE_CONTINU' ? 2 : 3, // CONTROLE_CONTINU: 2h, EXAMEN: 3h
                      document: `evaluation-${cours.id}-${typeEval.toLowerCase()}.pdf`,
                      description: `${typeEval} - ${cours.nom}`,
                      coursId: cours.id,
                    }
                  });
                  
                  totalEvaluationsCreated++;
                  console.log(`           ‚úÖ √âvaluation ${typeEval} cr√©√©e`);
                }

                // V√©rifier si la note existe d√©j√† pour cet √©tudiant et cette √©valuation
                const existingNote = await prisma.noteEtudiant.findFirst({
                  where: {
                    evaluationEtudiantId: evaluation.id,
                    etudiantId: etudiant.id,
                  }
                });

                if (!existingNote) {
                  // G√©n√©rer une note al√©atoire entre 10 et 17
                  const note = generateRandomNote(10, 17);

                  // Cr√©er la note pour l'√©tudiant
                  await prisma.noteEtudiant.create({
                    data: {
                      note: note,
                      evaluationEtudiantId: evaluation.id,
                      etudiantId: etudiant.id,
                    }
                  });

                  totalNotesCreated++;
                  console.log(`           üìä Note cr√©√©e: ${note}/20 (${typeEval})`);
                } else {
                  console.log(`           ‚Ü©Ô∏è  Note ${typeEval} existante: ${existingNote.note}/20`);
                }
              }
            }
          }
        }
      }
    }

    console.log('\nüéâ G√©n√©ration des notes termin√©e !');
    console.log(`üìà Statistiques:`);
    console.log(`   - √âtudiants trait√©s: ${etudiants.length}`);
    console.log(`   - Nouvelles √©valuations cr√©√©es: ${totalEvaluationsCreated}`);
    console.log(`   - Nouvelles notes cr√©√©es: ${totalNotesCreated}`);

  } catch (error) {
    console.error('‚ùå Erreur lors de la g√©n√©ration des notes:', error);
    throw error;
  } finally {
    await prisma.$disconnect();
  }
}

// Script principal
async function main() {
  console.log('='.repeat(60));
  console.log('üéì G√âN√âRATEUR DE NOTES AL√âATOIRES - ISCOM');
  console.log('='.repeat(60));
  
  try {
    await generateNotesForAllStudents();
    console.log('\n‚úÖ Script termin√© avec succ√®s !');
    process.exit(0);
  } catch (error) {
    console.error('\n‚ùå Erreur fatale:', error);
    process.exit(1);
  }
}

// Ex√©cution du script si appel√© directement
if (require.main === module) {
  main();
}

export { generateNotesForAllStudents };
